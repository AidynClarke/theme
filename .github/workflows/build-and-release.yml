name: Build and Release VSCode Extension

on:
  push:
    paths:
      - package.json # Trigger the workflow only when package.json changes
  workflow_dispatch: # Allow manual trigger as well

jobs:
  build:
    name: Build and release VSCode Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Check for version change
        id: version_check
        run: |
          # Extract the current version from the current branch
          current_version=$(jq -r '.version' package.json)

          # Fetch the main branch and get its version
          git fetch origin main:refs/remotes/origin/main
          previous_version=$(git show origin/main:package.json | jq -r '.version')

          echo "Current version: $current_version"
          echo "Previous version: $previous_version"

          # Compare versions
          if [ "$current_version" == "$previous_version" ]; then
            echo "No version change detected."
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "Version change detected."
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi
        env:
          PATH: $PATH

      - name: Skip if no version change
        if: steps.version_check.outputs.should_run == 'false'
        run: echo "Skipping build and release, no version change."

      - name: Install dependencies
        if: steps.version_check.outputs.should_run == 'true'
        run: npm install
      
      - name: Package VSCode extension
        if: steps.version_check.outputs.should_run == 'true'
        run: npm run package

      - name: Create GitHub Release
        if: steps.version_check.outputs.should_run == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.version_check.outputs.current_version }}
          release_name: "Release v${{ steps.version_check.outputs.current_version }}"
          body: "Automated release for version v${{ steps.version_check.outputs.current_version }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .vsix to GitHub release
        if: steps.version_check.outputs.should_run == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./*.vsix
          asset_name: my-extension-${{ steps.version_check.outputs.current_version }}.vsix
          asset_content_type: application/octet-stream
      